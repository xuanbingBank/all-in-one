name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.2)'
        required: true
        type: string
      environment:
        description: '选择环境'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: 设置 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'pnpm'
      
      - name: 获取 pnpm store 目录
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: 设置 pnpm 缓存
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: 安装依赖
        run: pnpm install --no-frozen-lockfile
      
      - name: 构建
        run: pnpm build
        env:
          NODE_ENV: ${{ github.event.inputs.environment }}
      
      - name: 获取变更日志
        id: changelog
        run: |
          # 获取上一个版本的tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # 如果存在上一个tag,则获取从上一个tag到现在的commits
          if [ ! -z "$LAST_TAG" ]; then
            # 按不同类型获取commits并存储到变量
            FEATURES=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep "^✨ feat:" || true)
            FIXES=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep "^🐛 fix:" || true)
            PERFS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep "^⚡️ perf:" || true)
            DOCS=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep "^📝 docs:" || true)
            CHORES=$(git log $LAST_TAG..HEAD --pretty=format:"%s" | grep "^🔧 chore:" || true)
          else
            # 如果是第一个版本,则获取所有commits
            FEATURES=$(git log --pretty=format:"%s" | grep "^✨ feat:" || true)
            FIXES=$(git log --pretty=format:"%s" | grep "^🐛 fix:" || true)
            PERFS=$(git log --pretty=format:"%s" | grep "^⚡️ perf:" || true)
            DOCS=$(git log --pretty=format:"%s" | grep "^📝 docs:" || true)
            CHORES=$(git log --pretty=format:"%s" | grep "^🔧 chore:" || true)
          fi
          
          # 将commits格式化为markdown并存储到文件
          {
            echo "CHANGELOG<<EOF"
            echo "## 更新内容"
            echo ""
            if [ ! -z "$FEATURES" ]; then
              echo "### 新特性 ✨"
              echo "$FEATURES" | sed 's/^✨ feat: /- /g'
              echo ""
            fi
            if [ ! -z "$FIXES" ]; then
              echo "### 修复 🐛"
              echo "$FIXES" | sed 's/^🐛 fix: /- /g'
              echo ""
            fi
            if [ ! -z "$PERFS" ]; then
              echo "### 优化 ⚡️"
              echo "$PERFS" | sed 's/^⚡️ perf: /- /g'
              echo ""
            fi
            if [ ! -z "$DOCS" ]; then
              echo "### 文档 📝"
              echo "$DOCS" | sed 's/^📝 docs: /- /g'
              echo ""
            fi
            if [ ! -z "$CHORES" ]; then
              echo "### 其他 🔧"
              echo "$CHORES" | sed 's/^🔧 chore: /- /g'
              echo ""
            fi
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          files: |
            upx/*.upx
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 版本信息
            - 版本号: v${{ github.event.inputs.version }}
            - 环境: ${{ github.event.inputs.environment }}
            - 发布时间: ${{ env.RELEASE_DATE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_DATE: ${{ steps.date.outputs.date }}
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ github.event.inputs.environment }}
          path: |
            dist/
            release/